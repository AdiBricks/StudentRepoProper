{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "title: 360 Image Test \n",
    "layout: post\n",
    "description: testttt\n",
    "courses: { csp: {week: 7}}\n",
    "categories: [C4.0]\n",
    "type: hacks\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "const create360Viewer = require('../');\n",
    "const getMaxTextureSize = require('./getMaxTextureSize');\n",
    "const dragDrop = require('drag-drop');\n",
    "\n",
    "const dropRegion = document.querySelector('#drop-region');\n",
    "\n",
    "// Get a canvas of some sort, e.g. fullscreen or embedded in a site\n",
    "const canvas = createCanvas({\n",
    "  canvas: document.querySelector('#canvas'),\n",
    "  // without this, the canvas defaults to full-screen\n",
    "  // viewport: [ 20, 20, 500, 256 ]\n",
    "});\n",
    "\n",
    "// Get the max image size possible\n",
    "const imageUrl = getImageURL();\n",
    "\n",
    "// whether to always rotate the view\n",
    "const autoSpin = false;\n",
    "\n",
    "// Load your image\n",
    "const image = new Image();\n",
    "image.src = imageUrl;\n",
    "image.onload = () => {\n",
    "  // Setup the 360 viewer\n",
    "  const viewer = create360Viewer({\n",
    "    image: image,\n",
    "    canvas: canvas\n",
    "  });\n",
    "\n",
    "  setupDragDrop(canvas, viewer);\n",
    "\n",
    "  // Start canvas render loop\n",
    "  viewer.start();\n",
    "\n",
    "  viewer.on('tick', (dt) => {\n",
    "    if (autoSpin && !viewer.controls.dragging) {\n",
    "      viewer.controls.theta -= dt * 0.00005;\n",
    "    }\n",
    "  });\n",
    "};\n",
    "\n",
    "// Utility to create a device pixel scaled canvas\n",
    "function createCanvas (opt = {}) {\n",
    "  // default to full screen (no width/height specified)\n",
    "  const viewport = opt.viewport || [ 0, 0 ];\n",
    "\n",
    "  const canvas = opt.canvas || document.createElement('canvas');\n",
    "  canvas.style.position = 'absolute';\n",
    "  canvas.style.top = `${viewport[0]}px`;\n",
    "  canvas.style.left = `${viewport[1]}px`;\n",
    "\n",
    "  // Resize the canvas with the proper device pixel ratio\n",
    "  const resizeCanvas = () => {\n",
    "    // default to fullscreen if viewport width/height is unspecified\n",
    "    const width = typeof viewport[2] === 'number' ? viewport[2] : window.innerWidth;\n",
    "    const height = typeof viewport[3] === 'number' ? viewport[3] : window.innerHeight;\n",
    "    const dpr = window.devicePixelRatio;\n",
    "    canvas.width = width * dpr;\n",
    "    canvas.height = height * dpr;\n",
    "    canvas.style.width = `${width}px`;\n",
    "    canvas.style.height = `${height}px`;\n",
    "  };\n",
    "\n",
    "  // Ensure the grab cursor appears even when the mouse is outside the window\n",
    "  const setupGrabCursor = () => {\n",
    "    canvas.addEventListener('mousedown', () => {\n",
    "      document.documentElement.classList.remove('grabbing');\n",
    "      document.documentElement.classList.add('grabbing');\n",
    "    });\n",
    "    window.addEventListener('mouseup', () => {\n",
    "      document.documentElement.classList.remove('grabbing');\n",
    "    });\n",
    "  };\n",
    "\n",
    "  window.addEventListener('resize', resizeCanvas);\n",
    "  resizeCanvas();\n",
    "  setupGrabCursor();\n",
    "  return canvas;\n",
    "}\n",
    "\n",
    "function getImageURL () {\n",
    "  // Choose a large texture size based on our GPU\n",
    "  const maxTextureSize = getMaxTextureSize();\n",
    "  let imageUrl = 'garage.jpg';\n",
    "  if (maxTextureSize >= 7000) imageUrl = 'garage.jpg';\n",
    "  else if (maxTextureSize >= 4096) imageUrl = 'garage.jpg';\n",
    "  return imageUrl;garage.jpg\n",
    "}\n",
    "\n",
    "function setupDragDrop (canvas, viewer) {\n",
    "  dragDrop(canvas, {\n",
    "    onDragEnter: () => {\n",
    "      dropRegion.style.display = '';\n",
    "    },\n",
    "    onDragLeave: () => {\n",
    "      dropRegion.style.display = 'none';\n",
    "    },\n",
    "    onDrop: (files) => {\n",
    "      var img = new Image();\n",
    "      img.onload = () => {\n",
    "        viewer.texture(img);\n",
    "      };\n",
    "      img.onerror = () => {\n",
    "        alert('Could not load image!');\n",
    "      };\n",
    "      img.crossOrigin = 'Anonymous';\n",
    "      img.src = URL.createObjectURL(files[0]);\n",
    "    }\n",
    "  });\n",
    "}"
   ]
  }
 ],
 "metadata": {
  "language_info": {
   "name": "python"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
